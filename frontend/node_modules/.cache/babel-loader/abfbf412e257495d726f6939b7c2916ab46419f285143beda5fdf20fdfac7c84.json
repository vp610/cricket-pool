{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{supabase}from'../db/supabase';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{const getUser=async()=>{const{data:{user}}=await supabase.auth.getUser();setUser(user);setLoading(false);};getUser();const{data:authListener}=supabase.auth.onAuthStateChange((event,session)=>{var _session$user;setUser((_session$user=session===null||session===void 0?void 0:session.user)!==null&&_session$user!==void 0?_session$user:null);});return()=>{authListener===null||authListener===void 0?void 0:authListener.subscription.unsubscribe();};},[]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,loading},children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","user","setUser","loading","setLoading","getUser","data","auth","authListener","onAuthStateChange","event","session","_session$user","subscription","unsubscribe","Provider","value","useAuth","context","Error"],"sources":["/Users/Vaidik/Desktop/fantasyPool/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { supabase } from '../db/supabase';\n\ninterface AuthContextType {\n  user: any; \n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [user, setUser] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const getUser = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      setUser(user);\n      setLoading(false);\n    };\n\n    getUser();\n\n    const { data: authListener } = supabase.auth.onAuthStateChange((event, session) => {\n      setUser(session?.user ?? null);\n    });\n\n    return () => {\n      authListener?.subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CACxF,OAASC,QAAQ,KAAQ,gBAAgB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAO1C,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAA8BQ,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,YAAY,CAAGC,IAAA,EAA2C,IAA1C,CAAEC,QAAkC,CAAC,CAAAD,IAAA,CAChE,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGX,QAAQ,CAAM,IAAI,CAAC,CAC3C,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAa,OAAO,CAAG,KAAAA,CAAA,GAAY,CAC1B,KAAM,CAAEC,IAAI,CAAE,CAAEL,IAAK,CAAE,CAAC,CAAG,KAAM,CAAAR,QAAQ,CAACc,IAAI,CAACF,OAAO,CAAC,CAAC,CACxDH,OAAO,CAACD,IAAI,CAAC,CACbG,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAEDC,OAAO,CAAC,CAAC,CAET,KAAM,CAAEC,IAAI,CAAEE,YAAa,CAAC,CAAGf,QAAQ,CAACc,IAAI,CAACE,iBAAiB,CAAC,CAACC,KAAK,CAAEC,OAAO,GAAK,KAAAC,aAAA,CACjFV,OAAO,EAAAU,aAAA,CAACD,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAEV,IAAI,UAAAW,aAAA,UAAAA,aAAA,CAAI,IAAI,CAAC,CAChC,CAAC,CAAC,CAEF,MAAO,IAAM,CACXJ,YAAY,SAAZA,YAAY,iBAAZA,YAAY,CAAEK,YAAY,CAACC,WAAW,CAAC,CAAC,CAC1C,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEnB,IAAA,CAACC,WAAW,CAACmB,QAAQ,EAACC,KAAK,CAAE,CAAEf,IAAI,CAAEE,OAAQ,CAAE,CAAAH,QAAA,CAC5CA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAiB,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAG5B,UAAU,CAACM,WAAW,CAAC,CACvC,GAAIsB,OAAO,GAAKrB,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAsB,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}